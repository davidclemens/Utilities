function T = readApolloFile(file)
% readApolloFile  Reads the data file from an Apollo AS-C6L DIC analyzer
%   READAPOLLOFILE reads the .csv data file from an Apollo Scientific AS-C6L DIC
%     analyzer and returns the data as a table.
%
%   Syntax
%     T = READAPOLLOFILE(file)
%
%   Description
%     T = READAPOLLOFILE(file) reads the .csv file at the fullpath file and
%       returns it as a table T.
%
%   Example(s)
%     T = READAPOLLOFILE('~/DIC-measurements.csv')
%
%
%   Input Arguments
%     file - absolute path to file
%       char
%         The absolute path to the .csv file to read.
%
%
%   Output Arguments
%     T - output table
%       table
%         The data from the .csv file returned as a table. Variable descriptions
%         and units are available.
%
%
%   Name-Value Pair Arguments
%
%
%   See also READTABLE
%
%   Copyright (c) 2022-2022 David Clemens (dclemens@geomar.de)
%

    % Define attributes
    %   Name                    Description     Units
    variableAttributes = {...
        'SampleId',             '',             '';...
        'SampleNoInBatch',      'In the batch', '';...
        'SampleName',           '',             '';...
        'Port',                 '',             '';...
        'Volume',               '',             'mL';...
        'StartTime',            'Local',        '';...
        'AttemptNo',            '',             '';...
        'LiCorCellTemp',        '',             'Â°C';...
        'H2O',                  '',             'per mil';...
        'BaselineInitial',      '',             'ppm';...
        'BaselineFinal',        '',             'ppm';...
        'Peak',                 '',             'ppm';...
        'IntegrationDuration',  '',             's';...
        'AreaNet',              '',             '';...
        'AreaNetAvg',           '',             '';...
        'DIC',                  '',             'uM';...
        'Status',               '',             '';...
        'BaselineLength',       '',             'pt';...
        'BaselineStdDev',       '',             '';...
        'WaitBtwnRepeat',       '',             's';...
        'WaitBtwnSample',       '',             's';...
        'FlushVolume',          '',             'ml';...
        'PreAcidVolume',        '',             'ml';...
        'AcidVolume',           '',             'ml';...
        'EndAnalysisCriteria',  '',             '';...
        'EndAnalysisValue',     '',             '';...
        'Precision',            '',             '';...
        'StandardCurve',        '',             '';...
        'GasFlowrate',          '',             ''};
    
    % The column format spec
    formatSpec = '%s%s%s%C%f%{MM/dd/yy  HH:mm:ss}D%f%f%f%f%f%f%f%f%f%f%C%*s%f%f%f%s%f%f%f%C%f%f%C%f';
    
    % Read the data
	T = readtable(file,...
        'FileType',             'text',...
        'Delimiter',            'comma',...
        'Encoding',             'windows-1251',...
        'Format',               formatSpec,...
        'HeaderLines',          1,...
        'ReadVariableNames',	false);
    
    % Assign attributes
    T.Properties.VariableNames = variableAttributes(:,1);
    T.Properties.VariableDescriptions = variableAttributes(:,2);
    T.Properties.VariableUnits = variableAttributes(:,3);
    
    % Modify WaitBtwnSample
    waitBtwnSample = NaN(size(T,1),1);
    mask = cellfun(@(x) strcmp(x,'Paused'),T{:,'WaitBtwnSample'});
    waitBtwnSample(~mask) = cellfun(@str2double, T{~mask,'WaitBtwnSample'});
    T.WaitBtwnSample = waitBtwnSample;
    
    % Modify status Halted
    mask = T.Status == 'Halted';
    setToNaNVars = {'LiCorCellTemp','H2O','BaselineInitial','BaselineFinal','Peak','IntegrationDuration','AreaNet','AreaNetAvg','DIC','GasFlowrate'};
    T{mask,setToNaNVars} = NaN(sum(mask),numel(setToNaNVars));
    
    % Modify time format
    T.StartTime.Format = 'dd.MM.yyyy HH:mm:ss';
end
